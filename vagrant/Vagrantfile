# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  box = "ubuntu/focal64"
  cpus = 1
  disk = "10GB"
  gui = false
  vagrant_data_dir = "#{ENV['VAGRANT_DATA']}"

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.

  ## Box 1: k8s
  config.vm.define :workshop_microk8s do |microk8s|
    microk8s.vm.box = box
    microk8s.vm.hostname = "workshop-microk8s.local"
    microk8s.vm.network :private_network, ip: "172.16.100.10"
    microk8s.vm.synced_folder vagrant_data_dir, "/vagrant_data"
    microk8s.disksize.size = disk

    microk8s.vm.provider :virtualbox do |vm|
      vm.memory = 2048
      vm.cpus = cpus
      vm.gui = gui
    end

    microk8s.vm.provision "shell", type: :shell, inline: <<-SHELL
      bash -c 'BASH_ENV=/etc/profile exec bash'

      sudo snap install microk8s --classic
      usermod -aG microk8s vagrant

      echo "alias kubectl='microk8s.kubectl'" > /home/vagrant/.bash_aliases
      chown vagrant:vagrant /home/vagrant/.bash_aliases
    SHELL

    microk8s.vm.provision "system_update", type: :ansible_local do |ansible|
      ansible.playbook = "playbooks/system-update.yml"
      ansible.install = :default
      ansible.limit = 'all,localhost'
    end

    microk8s.vm.provision "docker", type: :shell, inline: <<-SHELL
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
      sudo apt update
      sudo apt install docker-ce
    SHELL
  end

  ## Box 2: Postgres
  config.vm.define :workshop_datastores do |datastores|
    datastores.vm.box = box
    datastores.vm.hostname = "workshop-datastores.local"
    datastores.vm.network :private_network, ip: "172.16.100.20"
    datastores.vm.synced_folder vagrant_data_dir, "/vagrant_data"
    datastores.disksize.size = disk

    #datastores.vm.network "forwarded_port", guest: 7379, host: 6379, host_ip: "127.0.0.1"
    #datastores.vm.network "forwarded_port", guest: 6432, host: 5432, host_ip: "127.0.0.1"

    datastores.vm.provider :virtualbox do |vm|
      vm.memory = 1024
      vm.cpus = cpus
      vm.gui = gui
    end

    datastores.vm.provision "shell", type: :shell, inline: <<-SHELL
      bash -c 'BASH_ENV=/etc/profile exec bash'
    SHELL

    datastores.vm.provision "system_update", type: :ansible_local do |ansible|
      ansible.playbook = "playbooks/system-update.yml"
      ansible.install = :default
      ansible.limit = 'all,localhost'
    end

    datastores.vm.provision "datastore_setup", type: :ansible_local do |ansible|
      ansible.playbook = "playbooks/datastore-setup.yml"
      ansible.limit = 'all,localhost'
    end
  end

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.


  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
